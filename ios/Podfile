platform :ios, '12.0'
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

project 'Runner'


def flutter_root
  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  unless File.exist?(generated_xcode_build_settings_path)
    raise "#{generated_xcode_build_settings_path} must exist. Run 'flutter pub get' before 'pod install'."
  end
  File.foreach(generated_xcode_build_settings_path) do |line|
    match = line.match(/FLUTTER_ROOT=(.*)/)
    return match[1].strip if match
  end
  raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}."
end

require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)
flutter_ios_podfile_setup

target 'Runner' do
  use_frameworks! :linkage => :static

  use_modular_headers!

  flutter_install_all_ios_pods(File.dirname(File.realpath(__FILE__)))


end

# üîß Prevenir error "each for nil"
pre_install do |installer|
  installer.pod_targets.each do |pod|
    if pod.respond_to?(:build_configurations) && pod.build_configurations.nil?
      pod.define_singleton_method(:build_configurations) { [] }
    end
  end
end

post_install do |installer|
  installer.pods_project.targets.each do |target|
    next unless target.respond_to?(:build_configurations) && target.build_configurations.is_a?(Array)

    begin
      flutter_additional_ios_build_settings(target)
    rescue => e
      puts "‚ö†Ô∏è flutter_additional_ios_build_settings fall√≥ para #{target.name}: #{e.message}"
    end

    target.build_configurations.each do |config|
      config.build_settings['BUILD_LIBRARY_FOR_DISTRIBUTION'] = 'YES'
    end
  end
end 